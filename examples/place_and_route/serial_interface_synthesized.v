/* Generated by Yosys 0.20 (git sha1 4fcb95ed08, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os) */

(* src = "command_register.v:1.1-27.10" *)
module command_register(clk, data, receive, empty, ready, command);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  (* src = "command_register.v:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "command_register.v:14.15-14.22" *)
  wire [4:0] cmd_reg;
  (* src = "command_register.v:15.15-15.26" *)
  wire [4:0] cmd_reg_pre;
  (* src = "command_register.v:7.18-7.25" *)
  output [1:0] command;
  wire [1:0] command;
  (* src = "command_register.v:3.11-3.15" *)
  input data;
  wire data;
  (* src = "command_register.v:5.12-5.17" *)
  output empty;
  wire empty;
  (* src = "command_register.v:6.12-6.17" *)
  output ready;
  wire ready;
  (* src = "command_register.v:4.11-4.18" *)
  input receive;
  wire receive;
  nor_gate _05_ (
    .A(command[1]),
    .B(command[0]),
    .O(_01_)
  );
  or_gate _06_ (
    .A(cmd_reg[3]),
    .B(cmd_reg[2]),
    .O(_02_)
  );
  nor_gate _07_ (
    .A(cmd_reg[4]),
    .B(_02_),
    .O(_03_)
  );
  and_gate _08_ (
    .A(_01_),
    .B(_03_),
    .O(empty)
  );
  nand_gate _09_ (
    .A(cmd_reg[2]),
    .B(cmd_reg[4]),
    .O(_04_)
  );
  nor_gate _10_ (
    .A(cmd_reg[3]),
    .B(_04_),
    .O(ready)
  );
  and_gate _11_ (
    .A(data),
    .B(receive),
    .O(_00_)
  );
  (* src = "command_register.v:19.5-26.8" *)
  dffpq _12_ (
    .CLK(clk),
    .D(_00_),
    .Q(cmd_reg_pre[0])
  );
  (* src = "command_register.v:19.5-26.8" *)
  dffpq _13_ (
    .CLK(clk),
    .D(command[0]),
    .Q(cmd_reg_pre[1])
  );
  (* src = "command_register.v:19.5-26.8" *)
  dffpq _14_ (
    .CLK(clk),
    .D(command[1]),
    .Q(cmd_reg_pre[2])
  );
  (* src = "command_register.v:19.5-26.8" *)
  dffpq _15_ (
    .CLK(clk),
    .D(cmd_reg[2]),
    .Q(cmd_reg_pre[3])
  );
  (* src = "command_register.v:19.5-26.8" *)
  dffpq _16_ (
    .CLK(clk),
    .D(cmd_reg[3]),
    .Q(cmd_reg_pre[4])
  );
  (* src = "command_register.v:16.5-18.8" *)
  dffnq _17_ (
    .CLK(clk),
    .D(cmd_reg_pre[0]),
    .Q(command[0])
  );
  (* src = "command_register.v:16.5-18.8" *)
  dffnq _18_ (
    .CLK(clk),
    .D(cmd_reg_pre[1]),
    .Q(command[1])
  );
  (* src = "command_register.v:16.5-18.8" *)
  dffnq _19_ (
    .CLK(clk),
    .D(cmd_reg_pre[2]),
    .Q(cmd_reg[2])
  );
  (* src = "command_register.v:16.5-18.8" *)
  dffnq _20_ (
    .CLK(clk),
    .D(cmd_reg_pre[3]),
    .Q(cmd_reg[3])
  );
  (* src = "command_register.v:16.5-18.8" *)
  dffnq _21_ (
    .CLK(clk),
    .D(cmd_reg_pre[4]),
    .Q(cmd_reg[4])
  );
  assign cmd_reg[1:0] = command;
endmodule

(* src = "data_counter.v:1.1-18.10" *)
module data_counter(clk, reset, data_ready);
  wire _0_;
  wire _1_;
  wire _2_;
  wire [2:0] carry;
  (* src = "data_counter.v:3.11-3.14" *)
  input clk;
  wire clk;
  (* src = "data_counter.v:5.12-5.22" *)
  output data_ready;
  wire data_ready;
  (* src = "data_counter.v:11.16-11.20" *)
  wire [3:0] net0;
  (* src = "data_counter.v:9.16-9.20" *)
  wire [3:0] next;
  (* src = "data_counter.v:8.16-8.20" *)
  wire [3:0] outn;
  (* src = "data_counter.v:7.16-7.20" *)
  wire [3:0] outp;
  (* src = "data_counter.v:4.11-4.16" *)
  input reset;
  wire reset;
  not_gate _3_ (
    .I(outn[2]),
    .O(_0_)
  );
  nor_gate _4_ (
    .A(outn[1]),
    .B(outn[0]),
    .O(_1_)
  );
  and_gate _5_ (
    .A(_0_),
    .B(outn[3]),
    .O(_2_)
  );
  and_gate _6_ (
    .A(_1_),
    .B(_2_),
    .O(data_ready)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:13.11-13.53" *)
  dffnq \dffnq[0]  (
    .CLK(clk),
    .D(outp[0]),
    .Q(outn[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:13.11-13.53" *)
  dffnq \dffnq[1]  (
    .CLK(clk),
    .D(outp[1]),
    .Q(outn[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:13.11-13.53" *)
  dffnq \dffnq[2]  (
    .CLK(clk),
    .D(outp[2]),
    .Q(outn[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:13.11-13.53" *)
  dffnq \dffnq[3]  (
    .CLK(clk),
    .D(outp[3]),
    .Q(outn[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:12.11-12.53" *)
  dffpq \dffpq[0]  (
    .CLK(clk),
    .D(next[0]),
    .Q(outp[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:12.11-12.53" *)
  dffpq \dffpq[1]  (
    .CLK(clk),
    .D(next[1]),
    .Q(outp[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:12.11-12.53" *)
  dffpq \dffpq[2]  (
    .CLK(clk),
    .D(next[2]),
    .Q(outp[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:12.11-12.53" *)
  dffpq \dffpq[3]  (
    .CLK(clk),
    .D(next[3]),
    .Q(outp[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:16.9-16.63" *)
  mux \mux[0]  (
    .IN(1'h1),
    .IP(net0[0]),
    .O(next[0]),
    .SEL(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:16.9-16.63" *)
  mux \mux[1]  (
    .IN(1'h1),
    .IP(net0[1]),
    .O(next[1]),
    .SEL(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:16.9-16.63" *)
  mux \mux[2]  (
    .IN(1'h1),
    .IP(net0[2]),
    .O(next[2]),
    .SEL(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:16.9-16.63" *)
  mux \mux[3]  (
    .IN(1'h1),
    .IP(net0[3]),
    .O(next[3]),
    .SEL(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:15.13-15.71" *)
  or_gate \or_gate[0]  (
    .A(1'h0),
    .B(outn[0]),
    .O(carry[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:15.13-15.71" *)
  or_gate \or_gate[1]  (
    .A(carry[0]),
    .B(outn[1]),
    .O(carry[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:15.13-15.71" *)
  or_gate \or_gate[2]  (
    .A(carry[1]),
    .B(outn[2]),
    .O(carry[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[0]  (
    .A(1'h0),
    .B(outn[0]),
    .O(net0[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[1]  (
    .A(carry[0]),
    .B(outn[1]),
    .O(net0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[2]  (
    .A(carry[1]),
    .B(outn[2]),
    .O(net0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "data_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[3]  (
    .A(carry[2]),
    .B(outn[3]),
    .O(net0[3])
  );
endmodule

(* src = "register_cell_0.v:1.1-53.10" *)
module register_cell_0(clk, reset, update, enable, chain_in, chain_out, bit_out);
  (* src = "register_cell_0.v:8.15-8.22" *)
  output bit_out;
  wire bit_out;
  (* src = "register_cell_0.v:6.14-6.22" *)
  input chain_in;
  wire chain_in;
  (* src = "register_cell_0.v:7.15-7.24" *)
  output chain_out;
  wire chain_out;
  (* src = "register_cell_0.v:2.14-2.17" *)
  input clk;
  wire clk;
  (* src = "register_cell_0.v:4.14-4.20" *)
  input enable;
  wire enable;
  (* src = "register_cell_0.v:9.8-9.13" *)
  wire ff_in;
  (* src = "register_cell_0.v:11.8-11.18" *)
  wire hold_write;
  (* src = "register_cell_0.v:12.8-12.19" *)
  wire in_or_reset;
  (* src = "register_cell_0.v:3.14-3.19" *)
  input reset;
  wire reset;
  (* src = "register_cell_0.v:10.8-10.13" *)
  wire store;
  (* src = "register_cell_0.v:5.14-5.20" *)
  input update;
  wire update;
  (* src = "register_cell_0.v:13.8-13.23" *)
  wire update_or_store;
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:43.9-47.4" *)
  dffpq dff_buf (
    .CLK(clk),
    .D(in_or_reset),
    .Q(bit_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:32.7-37.4" *)
  mux dff_buf_mux (
    .IN(store),
    .IP(chain_out),
    .O(update_or_store),
    .SEL(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:21.9-25.4" *)
  dffpq dff_in (
    .CLK(clk),
    .D(hold_write),
    .Q(ff_in)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:26.9-30.4" *)
  dffnq dff_out (
    .CLK(clk),
    .D(ff_in),
    .Q(chain_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:48.9-52.4" *)
  dffnq dff_store (
    .CLK(clk),
    .D(bit_out),
    .Q(store)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:15.7-20.4" *)
  mux hold_write_mux (
    .IN(chain_out),
    .IP(chain_in),
    .O(hold_write),
    .SEL(enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "register_cell_0.v:38.12-42.4" *)
  and_gate reset_and_gate (
    .A(reset),
    .B(update_or_store),
    .O(in_or_reset)
  );
endmodule

(* src = "reset_counter.v:1.1-18.10" *)
module reset_counter(clk, data, reset);
  wire [3:0] carry;
  (* src = "reset_counter.v:3.11-3.14" *)
  input clk;
  wire clk;
  (* src = "reset_counter.v:4.11-4.15" *)
  input data;
  wire data;
  (* src = "reset_counter.v:11.16-11.20" *)
  wire [4:0] net0;
  (* src = "reset_counter.v:9.16-9.20" *)
  wire [4:0] next;
  (* src = "reset_counter.v:8.16-8.20" *)
  wire [4:0] outn;
  (* src = "reset_counter.v:7.16-7.20" *)
  wire [4:0] outp;
  (* src = "reset_counter.v:5.12-5.17" *)
  output reset;
  wire reset;
  not_gate _0_ (
    .I(outn[4]),
    .O(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:13.11-13.53" *)
  dffnq \dffnq[0]  (
    .CLK(clk),
    .D(outp[0]),
    .Q(outn[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:13.11-13.53" *)
  dffnq \dffnq[1]  (
    .CLK(clk),
    .D(outp[1]),
    .Q(outn[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:13.11-13.53" *)
  dffnq \dffnq[2]  (
    .CLK(clk),
    .D(outp[2]),
    .Q(outn[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:13.11-13.53" *)
  dffnq \dffnq[3]  (
    .CLK(clk),
    .D(outp[3]),
    .Q(outn[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:13.11-13.53" *)
  dffnq \dffnq[4]  (
    .CLK(clk),
    .D(outp[4]),
    .Q(outn[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:12.11-12.53" *)
  dffpq \dffpq[0]  (
    .CLK(clk),
    .D(next[0]),
    .Q(outp[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:12.11-12.53" *)
  dffpq \dffpq[1]  (
    .CLK(clk),
    .D(next[1]),
    .Q(outp[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:12.11-12.53" *)
  dffpq \dffpq[2]  (
    .CLK(clk),
    .D(next[2]),
    .Q(outp[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:12.11-12.53" *)
  dffpq \dffpq[3]  (
    .CLK(clk),
    .D(next[3]),
    .Q(outp[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:12.11-12.53" *)
  dffpq \dffpq[4]  (
    .CLK(clk),
    .D(next[4]),
    .Q(outp[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:16.9-16.62" *)
  mux \mux[0]  (
    .IN(1'h1),
    .IP(net0[0]),
    .O(next[0]),
    .SEL(data)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:16.9-16.62" *)
  mux \mux[1]  (
    .IN(1'h1),
    .IP(net0[1]),
    .O(next[1]),
    .SEL(data)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:16.9-16.62" *)
  mux \mux[2]  (
    .IN(1'h1),
    .IP(net0[2]),
    .O(next[2]),
    .SEL(data)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:16.9-16.62" *)
  mux \mux[3]  (
    .IN(1'h1),
    .IP(net0[3]),
    .O(next[3]),
    .SEL(data)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:16.9-16.62" *)
  mux \mux[4]  (
    .IN(1'h1),
    .IP(net0[4]),
    .O(next[4]),
    .SEL(data)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:15.13-15.71" *)
  or_gate \or_gate[0]  (
    .A(1'h0),
    .B(outn[0]),
    .O(carry[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:15.13-15.71" *)
  or_gate \or_gate[1]  (
    .A(carry[0]),
    .B(outn[1]),
    .O(carry[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:15.13-15.71" *)
  or_gate \or_gate[2]  (
    .A(carry[1]),
    .B(outn[2]),
    .O(carry[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:15.13-15.71" *)
  or_gate \or_gate[3]  (
    .A(carry[2]),
    .B(outn[3]),
    .O(carry[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[0]  (
    .A(1'h0),
    .B(outn[0]),
    .O(net0[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[1]  (
    .A(carry[0]),
    .B(outn[1]),
    .O(net0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[2]  (
    .A(carry[1]),
    .B(outn[2]),
    .O(net0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[3]  (
    .A(carry[2]),
    .B(outn[3]),
    .O(net0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "reset_counter.v:14.15-14.74" *)
  xnor_gate \xnor_gate[4]  (
    .A(carry[3]),
    .B(outn[4]),
    .O(net0[4])
  );
endmodule

(* src = "control.v:1.1-131.10" *)
module serial_ctrl(clk, data_in, write, data_ready, data_out_shift_reg_in, reset_internal, enable_data_counter, update, reset_shift_reg_out, enable_shift_register, write_shift_register);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  (* force_downto = 32'd1 *)
  (* src = "control.v:0.0-0.0|control.v:64.13-125.20|/usr/bin/../share/yosys/techmap.v:575.21-575.22" *)
  wire [2:0] _28_;
  (* src = "control.v:3.11-3.14" *)
  input clk;
  wire clk;
  (* src = "control.v:56.16-56.23" *)
  wire [1:0] command;
  (* src = "control.v:55.10-55.23" *)
  wire command_empty;
  (* src = "control.v:54.10-54.23" *)
  wire command_ready;
  (* src = "control.v:29.15-29.25" *)
  wire [3:0] curr_state;
  (* src = "control.v:28.15-28.29" *)
  wire [3:0] curr_state_pre;
  (* src = "control.v:4.11-4.18" *)
  input data_in;
  wire data_in;
  (* src = "control.v:7.11-7.32" *)
  input data_out_shift_reg_in;
  wire data_out_shift_reg_in;
  (* src = "control.v:6.11-6.21" *)
  input data_ready;
  wire data_ready;
  (* src = "control.v:9.12-9.31" *)
  output enable_data_counter;
  wire enable_data_counter;
  (* src = "control.v:12.12-12.33" *)
  output enable_shift_register;
  wire enable_shift_register;
  (* src = "control.v:52.10-52.25" *)
  wire receive_command;
  (* src = "control.v:8.11-8.25" *)
  input reset_internal;
  wire reset_internal;
  (* src = "control.v:11.12-11.31" *)
  output reset_shift_reg_out;
  wire reset_shift_reg_out;
  (* src = "control.v:10.12-10.18" *)
  output update;
  wire update;
  (* src = "control.v:5.12-5.17" *)
  output write;
  wire write;
  (* src = "control.v:13.12-13.32" *)
  output write_shift_register;
  wire write_shift_register;
  not_gate _29_ (
    .I(curr_state[3]),
    .O(_01_)
  );
  not_gate _30_ (
    .I(curr_state[1]),
    .O(_02_)
  );
  not_gate _31_ (
    .I(curr_state[0]),
    .O(_03_)
  );
  not_gate _32_ (
    .I(command[1]),
    .O(_04_)
  );
  and_gate _33_ (
    .A(curr_state[1]),
    .B(_03_),
    .O(_05_)
  );
  and_gate _34_ (
    .A(_01_),
    .B(curr_state[2]),
    .O(_06_)
  );
  nand_gate _35_ (
    .A(_05_),
    .B(_06_),
    .O(reset_shift_reg_out)
  );
  xor_gate _36_ (
    .A(curr_state[1]),
    .B(curr_state[0]),
    .O(_07_)
  );
  and_gate _37_ (
    .A(_06_),
    .B(_07_),
    .O(update)
  );
  nor_gate _38_ (
    .A(curr_state[3]),
    .B(curr_state[2]),
    .O(_08_)
  );
  and_gate _39_ (
    .A(_02_),
    .B(_08_),
    .O(enable_data_counter)
  );
  and_gate _40_ (
    .A(curr_state[0]),
    .B(enable_data_counter),
    .O(write)
  );
  nor_gate _41_ (
    .A(curr_state[1]),
    .B(curr_state[0]),
    .O(_09_)
  );
  and_gate _42_ (
    .A(_08_),
    .B(_09_),
    .O(write_shift_register)
  );
  and_gate _43_ (
    .A(_05_),
    .B(_08_),
    .O(receive_command)
  );
  nand_gate _44_ (
    .A(command_ready),
    .B(command[0]),
    .O(_10_)
  );
  nand_gate _45_ (
    .A(_03_),
    .B(_10_),
    .O(_11_)
  );
  nand_gate _46_ (
    .A(_08_),
    .B(_11_),
    .O(_12_)
  );
  nor_gate _47_ (
    .A(_09_),
    .B(_12_),
    .O(_28_[0])
  );
  nand_gate _48_ (
    .A(data_ready),
    .B(write),
    .O(_13_)
  );
  and_gate _49_ (
    .A(_01_),
    .B(_13_),
    .O(_14_)
  );
  xor_gate _50_ (
    .A(command[1]),
    .B(command[0]),
    .O(_15_)
  );
  nand_gate _51_ (
    .A(command_ready),
    .B(_15_),
    .O(_16_)
  );
  nand_gate _52_ (
    .A(receive_command),
    .B(_16_),
    .O(_17_)
  );
  and_gate _53_ (
    .A(command_empty),
    .B(_09_),
    .O(_18_)
  );
  nand_gate _54_ (
    .A(command_empty),
    .B(_09_),
    .O(_19_)
  );
  nand_gate _55_ (
    .A(_06_),
    .B(_18_),
    .O(_20_)
  );
  and_gate _56_ (
    .A(_17_),
    .B(_20_),
    .O(_21_)
  );
  nand_gate _57_ (
    .A(_14_),
    .B(_21_),
    .O(_28_[1])
  );
  and_gate _58_ (
    .A(command_ready),
    .B(_04_),
    .O(_22_)
  );
  nand_gate _59_ (
    .A(receive_command),
    .B(_22_),
    .O(_23_)
  );
  nand_gate _60_ (
    .A(data_ready),
    .B(write_shift_register),
    .O(_24_)
  );
  nand_gate _61_ (
    .A(_06_),
    .B(_19_),
    .O(_25_)
  );
  and_gate _62_ (
    .A(_24_),
    .B(_25_),
    .O(_26_)
  );
  and_gate _63_ (
    .A(_23_),
    .B(_26_),
    .O(_27_)
  );
  nand_gate _64_ (
    .A(_14_),
    .B(_27_),
    .O(_28_[2])
  );
  buf_gate _65_ (
    .I(reset_internal),
    .O(_00_)
  );
  (* src = "control.v:59.5-127.8" *)
  dffpq _66_ (
    .CLK(clk),
    .D(_28_[0]),
    .Q(curr_state_pre[0])
  );
  (* src = "control.v:59.5-127.8" *)
  dffpq _67_ (
    .CLK(clk),
    .D(_28_[1]),
    .Q(curr_state_pre[1])
  );
  (* src = "control.v:59.5-127.8" *)
  dffpq _68_ (
    .CLK(clk),
    .D(_28_[2]),
    .Q(curr_state_pre[2])
  );
  (* src = "control.v:128.5-130.8" *)
  dffnq _69_ (
    .CLK(clk),
    .D(curr_state_pre[0]),
    .Q(curr_state[0])
  );
  (* src = "control.v:128.5-130.8" *)
  dffnq _70_ (
    .CLK(clk),
    .D(curr_state_pre[1]),
    .Q(curr_state[1])
  );
  (* src = "control.v:128.5-130.8" *)
  dffnq _71_ (
    .CLK(clk),
    .D(curr_state_pre[2]),
    .Q(curr_state[2])
  );
  (* src = "control.v:128.5-130.8" *)
  dffnq _72_ (
    .CLK(clk),
    .D(curr_state_pre[3]),
    .Q(curr_state[3])
  );
  (* src = "control.v:59.5-127.8" *)
  dffpq _73_ (
    .CLK(clk),
    .D(_00_),
    .Q(curr_state_pre[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "control.v:57.22-57.157" *)
  command_register command_register (
    .clk(clk),
    .command(command),
    .data(data_in),
    .empty(command_empty),
    .ready(command_ready),
    .receive(receive_command)
  );
  assign enable_shift_register = enable_data_counter;
endmodule

(* top =  1  *)
(* src = "toplevel.v:1.1-65.10" *)
module serial_interface(clk, data_inout, bit_out);
  (* src = "toplevel.v:7.18-7.25" *)
  output [7:0] bit_out;
  wire [7:0] bit_out;
  (* src = "toplevel.v:4.11-4.14" *)
  input clk;
  wire clk;
  (* src = "toplevel.v:5.11-5.21" *)
  inout data_inout;
  wire data_inout;
  (* src = "toplevel.v:21.10-21.18" *)
  wire data_out;
  (* src = "toplevel.v:10.10-10.20" *)
  wire data_ready;
  (* src = "toplevel.v:9.10-9.29" *)
  wire enable_data_counter;
  (* src = "toplevel.v:15.10-15.31" *)
  wire enable_shift_register;
  (* src = "toplevel.v:11.10-11.24" *)
  wire reset_internal;
  (* src = "toplevel.v:14.10-14.30" *)
  wire reset_shift_register;
  (* src = "toplevel.v:13.10-13.16" *)
  wire update;
  (* src = "toplevel.v:17.10-17.15" *)
  wire write;
  (* src = "toplevel.v:18.10-18.30" *)
  wire write_shift_register;
  (* module_not_derived = 32'd1 *)
  (* src = "toplevel.v:24.10-28.6" *)
  tbuf bidir_data_buffer (
    .EN(write),
    .I(data_out),
    .O(data_inout)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "toplevel.v:30.17-41.6" *)
  serial_ctrl control (
    .clk(clk),
    .data_in(data_inout),
    .data_ready(data_ready),
    .enable_data_counter(enable_data_counter),
    .enable_shift_register(enable_shift_register),
    .reset_internal(reset_internal),
    .reset_shift_reg_out(reset_shift_register),
    .update(update),
    .write(write),
    .write_shift_register(write_shift_register)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "toplevel.v:55.20-64.6" *)
  shift_register daisychain (
    .bit_out(bit_out),
    .clk(clk),
    .data_in(data_inout),
    .data_out(data_out),
    .enable(enable_shift_register),
    .reset(reset_shift_register),
    .update(update),
    .write(write_shift_register)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "toplevel.v:49.18-53.6" *)
  data_counter data_counter (
    .clk(clk),
    .data_ready(data_ready),
    .reset(enable_data_counter)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "toplevel.v:43.19-47.6" *)
  reset_counter reset_counter (
    .clk(clk),
    .data(data_inout),
    .reset(reset_internal)
  );
endmodule

(* src = "shift_register.v:1.1-105.10" *)
module shift_register(clk, data_in, update, reset, enable, write, data_out, bit_out);
  (* src = "shift_register.v:10.18-10.25" *)
  output [7:0] bit_out;
  wire [7:0] bit_out;
  (* src = "shift_register.v:18.16-18.25" *)
  wire [7:0] cells_out;
  (* src = "shift_register.v:3.11-3.14" *)
  input clk;
  wire clk;
  (* src = "shift_register.v:4.11-4.18" *)
  input data_in;
  wire data_in;
  (* src = "shift_register.v:21.10-21.26" *)
  wire data_in_internal;
  (* src = "shift_register.v:9.12-9.20" *)
  output data_out;
  wire data_out;
  (* src = "shift_register.v:7.11-7.17" *)
  input enable;
  wire enable;
  (* src = "shift_register.v:6.11-6.16" *)
  input reset;
  wire reset;
  (* src = "shift_register.v:5.11-5.17" *)
  input update;
  wire update;
  (* src = "shift_register.v:8.11-8.16" *)
  input write;
  wire write;
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:26.9-31.6" *)
  mux data_in_mux (
    .IN(data_out),
    .IP(data_in),
    .O(data_in_internal),
    .SEL(write)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:96.21-104.6" *)
  register_cell_0 regcell_0 (
    .bit_out(bit_out[0]),
    .chain_in(cells_out[1]),
    .chain_out(data_out),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:87.21-95.6" *)
  register_cell_0 regcell_1 (
    .bit_out(bit_out[1]),
    .chain_in(cells_out[2]),
    .chain_out(cells_out[1]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:78.21-86.6" *)
  register_cell_0 regcell_2 (
    .bit_out(bit_out[2]),
    .chain_in(cells_out[3]),
    .chain_out(cells_out[2]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:69.21-77.6" *)
  register_cell_0 regcell_3 (
    .bit_out(bit_out[3]),
    .chain_in(cells_out[4]),
    .chain_out(cells_out[3]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:60.21-68.6" *)
  register_cell_0 regcell_4 (
    .bit_out(bit_out[4]),
    .chain_in(cells_out[5]),
    .chain_out(cells_out[4]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:51.21-59.6" *)
  register_cell_0 regcell_5 (
    .bit_out(bit_out[5]),
    .chain_in(cells_out[6]),
    .chain_out(cells_out[5]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:42.21-50.6" *)
  register_cell_0 regcell_6 (
    .bit_out(bit_out[6]),
    .chain_in(cells_out[7]),
    .chain_out(cells_out[6]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "shift_register.v:33.21-41.6" *)
  register_cell_0 regcell_7 (
    .bit_out(bit_out[7]),
    .chain_in(data_in_internal),
    .chain_out(cells_out[7]),
    .clk(clk),
    .enable(enable),
    .reset(reset),
    .update(update)
  );
  assign cells_out[0] = data_out;
endmodule
