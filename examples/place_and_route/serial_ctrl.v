/* Generated by Yosys 0.12 (git sha1 UNKNOWN, gcc 12.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os) */

(* hdlname = "\\serial_ctrl" *)
(* top =  1  *)
(* src = "serial_ctrl.sv:9.1-239.10" *)
module serial_ctrl(data_inout, clk, reset_in, count_reached_in, data_out_shift_reg_in, reset_count_out, update_shift_reg_out, reset_shift_reg_out, enable_shift_register);
  (* src = "serial_ctrl.sv:83.5-90.8" *)
  wire [1:0] _000_;
  (* src = "serial_ctrl.sv:108.5-118.8" *)
  wire _001_;
  (* src = "serial_ctrl.sv:55.5-62.8" *)
  wire _002_;
  (* src = "serial_ctrl.sv:42.5-49.8" *)
  wire _003_;
  (* src = "serial_ctrl.sv:68.5-75.8" *)
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  (* force_downto = 32'd1 *)
  (* src = "serial_ctrl.sv:0.0-0.0|serial_ctrl.sv:157.13-230.20|/usr/bin/../share/yosys/techmap.v:575.21-575.22" *)
  wire [3:0] _095_;
  (* src = "serial_ctrl.sv:121.71-121.78" *)
  wire [2:0] ack_out;
  (* src = "serial_ctrl.sv:27.71-27.82" *)
  wire [2:0] ack_out_pre;
  (* src = "serial_ctrl.sv:13.17-13.20" *)
  input clk;
  (* src = "serial_ctrl.sv:94.219-94.228" *)
  wire [2:0] cmd_count;
  (* src = "serial_ctrl.sv:93.219-93.232" *)
  wire [2:0] cmd_count_pre;
  (* src = "serial_ctrl.sv:79.74-79.81" *)
  wire [1:0] cmd_reg;
  (* src = "serial_ctrl.sv:78.74-78.85" *)
  wire [1:0] cmd_reg_pre;
  (* src = "serial_ctrl.sv:16.17-16.33" *)
  input count_reached_in;
  (* enum_value_0000 = "\\RESET_ST" *)
  (* enum_value_0001 = "\\RECOVER_ST" *)
  (* enum_value_0010 = "\\IDLE_ST" *)
  (* enum_value_0011 = "\\UPDATE_ST" *)
  (* enum_value_0100 = "\\RESET_REGISTER_ST" *)
  (* enum_value_0101 = "\\RCV_CMD_ST" *)
  (* enum_value_0110 = "\\ACK_CMD_ST" *)
  (* enum_value_0111 = "\\RCV_DATA_ST" *)
  (* enum_value_1000 = "\\SND_DATA_ST" *)
  (* enum_value_1001 = "\\PLACEHOLDER1_ST" *)
  (* enum_value_1010 = "\\PLACEHOLDER2_ST" *)
  (* enum_value_1011 = "\\PLACEHOLDER3_ST" *)
  (* enum_value_1100 = "\\PLACEHOLDER4_ST" *)
  (* enum_value_1101 = "\\PLACEHOLDER5_ST" *)
  (* enum_value_1110 = "\\PLACEHOLDER6_ST" *)
  (* enum_value_1111 = "\\PLACEHOLDER7_ST" *)
  (* src = "serial_ctrl.sv:32.18-32.28" *)
  (* wiretype = "\\ctrl_state_t" *)
  wire [3:0] curr_state;
  (* enum_value_0000 = "\\RESET_ST" *)
  (* enum_value_0001 = "\\RECOVER_ST" *)
  (* enum_value_0010 = "\\IDLE_ST" *)
  (* enum_value_0011 = "\\UPDATE_ST" *)
  (* enum_value_0100 = "\\RESET_REGISTER_ST" *)
  (* enum_value_0101 = "\\RCV_CMD_ST" *)
  (* enum_value_0110 = "\\ACK_CMD_ST" *)
  (* enum_value_0111 = "\\RCV_DATA_ST" *)
  (* enum_value_1000 = "\\SND_DATA_ST" *)
  (* enum_value_1001 = "\\PLACEHOLDER1_ST" *)
  (* enum_value_1010 = "\\PLACEHOLDER2_ST" *)
  (* enum_value_1011 = "\\PLACEHOLDER3_ST" *)
  (* enum_value_1100 = "\\PLACEHOLDER4_ST" *)
  (* enum_value_1101 = "\\PLACEHOLDER5_ST" *)
  (* enum_value_1110 = "\\PLACEHOLDER6_ST" *)
  (* enum_value_1111 = "\\PLACEHOLDER7_ST" *)
  (* src = "serial_ctrl.sv:33.18-33.33" *)
  (* wiretype = "\\ctrl_state_t" *)
  wire [3:0] curr_state_post;
  (* enum_value_0000 = "\\RESET_ST" *)
  (* enum_value_0001 = "\\RECOVER_ST" *)
  (* enum_value_0010 = "\\IDLE_ST" *)
  (* enum_value_0011 = "\\UPDATE_ST" *)
  (* enum_value_0100 = "\\RESET_REGISTER_ST" *)
  (* enum_value_0101 = "\\RCV_CMD_ST" *)
  (* enum_value_0110 = "\\ACK_CMD_ST" *)
  (* enum_value_0111 = "\\RCV_DATA_ST" *)
  (* enum_value_1000 = "\\SND_DATA_ST" *)
  (* enum_value_1001 = "\\PLACEHOLDER1_ST" *)
  (* enum_value_1010 = "\\PLACEHOLDER2_ST" *)
  (* enum_value_1011 = "\\PLACEHOLDER3_ST" *)
  (* enum_value_1100 = "\\PLACEHOLDER4_ST" *)
  (* enum_value_1101 = "\\PLACEHOLDER5_ST" *)
  (* enum_value_1110 = "\\PLACEHOLDER6_ST" *)
  (* enum_value_1111 = "\\PLACEHOLDER7_ST" *)
  (* src = "serial_ctrl.sv:31.18-31.32" *)
  (* wiretype = "\\ctrl_state_t" *)
  wire [3:0] curr_state_pre;
  (* src = "serial_ctrl.sv:12.17-12.27" *)
  inout data_inout;
  (* src = "serial_ctrl.sv:17.17-17.38" *)
  input data_out_shift_reg_in;
  (* src = "serial_ctrl.sv:24.11-24.21" *)
  wire enable_ack;
  (* src = "serial_ctrl.sv:21.18-21.39" *)
  output enable_shift_register;
  (* src = "serial_ctrl.sv:26.11-26.23" *)
  wire enable_write;
  (* src = "serial_ctrl.sv:18.18-18.33" *)
  output reset_count_out;
  (* src = "serial_ctrl.sv:14.17-14.25" *)
  input reset_in;
  (* src = "serial_ctrl.sv:20.18-20.37" *)
  output reset_shift_reg_out;
  (* src = "serial_ctrl.sv:135.11-135.21" *)
  wire syncreset1;
  (* src = "serial_ctrl.sv:135.23-135.33" *)
  wire syncreset2;
  (* src = "serial_ctrl.sv:19.18-19.38" *)
  output update_shift_reg_out;
  not_gate _096_ (
    .I(ack_out[0]),
    .O(_055_)
  );
  not_gate _097_ (
    .I(curr_state[3]),
    .O(_056_)
  );
  not_gate _098_ (
    .I(curr_state_pre[2]),
    .O(_057_)
  );
  not_gate _099_ (
    .I(cmd_reg[1]),
    .O(_058_)
  );
  not_gate _100_ (
    .I(cmd_count[2]),
    .O(_059_)
  );
  not_gate _101_ (
    .I(curr_state[0]),
    .O(_060_)
  );
  not_gate _102_ (
    .I(curr_state_pre[0]),
    .O(_061_)
  );
  not_gate _103_ (
    .I(count_reached_in),
    .O(_062_)
  );
  nand_gate _104_ (
    .A(curr_state_pre[1]),
    .B(_061_),
    .O(_063_)
  );
  or_gate _105_ (
    .A(curr_state_pre[3]),
    .B(_063_),
    .O(_064_)
  );
  nor_gate _106_ (
    .A(curr_state_pre[2]),
    .B(_064_),
    .O(_065_)
  );
  nor_gate _107_ (
    .A(cmd_count[0]),
    .B(_065_),
    .O(_005_)
  );
  and_gate _108_ (
    .A(cmd_count[0]),
    .B(cmd_count[1]),
    .O(_066_)
  );
  xnor_gate _109_ (
    .A(cmd_count[0]),
    .B(cmd_count[1]),
    .O(_067_)
  );
  nor_gate _110_ (
    .A(_065_),
    .B(_067_),
    .O(_006_)
  );
  and_gate _111_ (
    .A(_059_),
    .B(_066_),
    .O(_068_)
  );
  xnor_gate _112_ (
    .A(cmd_count[2]),
    .B(_066_),
    .O(_069_)
  );
  nor_gate _113_ (
    .A(_065_),
    .B(_069_),
    .O(_007_)
  );
  nor_gate _114_ (
    .A(_057_),
    .B(_064_),
    .O(_070_)
  );
  xnor_gate _115_ (
    .A(curr_state_pre[3]),
    .B(curr_state_post[3]),
    .O(_071_)
  );
  xnor_gate _116_ (
    .A(curr_state_pre[2]),
    .B(curr_state_post[2]),
    .O(_072_)
  );
  xnor_gate _117_ (
    .A(curr_state_pre[0]),
    .B(curr_state_post[0]),
    .O(_073_)
  );
  xnor_gate _118_ (
    .A(curr_state_pre[1]),
    .B(curr_state_post[1]),
    .O(_074_)
  );
  and_gate _119_ (
    .A(_072_),
    .B(_074_),
    .O(_075_)
  );
  and_gate _120_ (
    .A(_071_),
    .B(_073_),
    .O(_076_)
  );
  nand_gate _121_ (
    .A(_075_),
    .B(_076_),
    .O(_077_)
  );
  and_gate _122_ (
    .A(_070_),
    .B(_077_),
    .O(_078_)
  );
  or_gate _123_ (
    .A(ack_out[2]),
    .B(_078_),
    .O(_008_)
  );
  nor_gate _124_ (
    .A(_055_),
    .B(_078_),
    .O(_009_)
  );
  or_gate _125_ (
    .A(ack_out[1]),
    .B(_078_),
    .O(_010_)
  );
  nor_gate _126_ (
    .A(curr_state_pre[1]),
    .B(curr_state_pre[0]),
    .O(_079_)
  );
  nand_gate _127_ (
    .A(curr_state_pre[2]),
    .B(_079_),
    .O(_080_)
  );
  or_gate _128_ (
    .A(curr_state_pre[3]),
    .B(_080_),
    .O(_003_)
  );
  and_gate _129_ (
    .A(curr_state[0]),
    .B(curr_state[1]),
    .O(_081_)
  );
  nor_gate _130_ (
    .A(curr_state[3]),
    .B(curr_state[2]),
    .O(_082_)
  );
  and_gate _131_ (
    .A(_081_),
    .B(_082_),
    .O(_004_)
  );
  and_gate _132_ (
    .A(_060_),
    .B(curr_state[1]),
    .O(_083_)
  );
  and_gate _133_ (
    .A(_056_),
    .B(curr_state[2]),
    .O(_084_)
  );
  and_gate _134_ (
    .A(_083_),
    .B(_084_),
    .O(_085_)
  );
  not_gate _135_ (
    .I(_085_),
    .O(reset_count_out)
  );
  and_gate _136_ (
    .A(curr_state_pre[3]),
    .B(_079_),
    .O(_086_)
  );
  and_gate _137_ (
    .A(_057_),
    .B(_086_),
    .O(_002_)
  );
  nand_gate _138_ (
    .A(_081_),
    .B(_084_),
    .O(_087_)
  );
  or_gate _139_ (
    .A(curr_state[2]),
    .B(curr_state[0]),
    .O(_088_)
  );
  nor_gate _140_ (
    .A(curr_state[0]),
    .B(curr_state[1]),
    .O(_089_)
  );
  or_gate _141_ (
    .A(curr_state[0]),
    .B(curr_state[1]),
    .O(_090_)
  );
  nor_gate _142_ (
    .A(_056_),
    .B(curr_state[2]),
    .O(_091_)
  );
  nand_gate _143_ (
    .A(_089_),
    .B(_091_),
    .O(_092_)
  );
  nand_gate _144_ (
    .A(_087_),
    .B(_092_),
    .O(enable_shift_register)
  );
  nor_gate _145_ (
    .A(_059_),
    .B(cmd_count[1]),
    .O(_093_)
  );
  or_gate _146_ (
    .A(_068_),
    .B(_093_),
    .O(_094_)
  );
  and_gate _147_ (
    .A(_070_),
    .B(_094_),
    .O(_001_)
  );
  nand_gate _148_ (
    .A(enable_write),
    .B(data_out_shift_reg_in),
    .O(_011_)
  );
  nand_gate _149_ (
    .A(enable_ack),
    .B(ack_out_pre[0]),
    .O(_012_)
  );
  or_gate _150_ (
    .A(enable_ack),
    .B(_011_),
    .O(_013_)
  );
  nand_gate _151_ (
    .A(_012_),
    .B(_013_),
    .O(data_inout)
  );
  nor_gate _152_ (
    .A(_060_),
    .B(curr_state[1]),
    .O(_014_)
  );
  and_gate _153_ (
    .A(_084_),
    .B(_014_),
    .O(_015_)
  );
  nand_gate _154_ (
    .A(_084_),
    .B(_014_),
    .O(_016_)
  );
  nand_gate _155_ (
    .A(cmd_reg[0]),
    .B(_016_),
    .O(_017_)
  );
  nand_gate _156_ (
    .A(data_inout),
    .B(_015_),
    .O(_018_)
  );
  nand_gate _157_ (
    .A(_017_),
    .B(_018_),
    .O(_000_[0])
  );
  nand_gate _158_ (
    .A(cmd_reg[0]),
    .B(_015_),
    .O(_019_)
  );
  nand_gate _159_ (
    .A(cmd_reg[1]),
    .B(_016_),
    .O(_020_)
  );
  nand_gate _160_ (
    .A(_019_),
    .B(_020_),
    .O(_000_[1])
  );
  or_gate _161_ (
    .A(count_reached_in),
    .B(_087_),
    .O(_021_)
  );
  and_gate _162_ (
    .A(_082_),
    .B(_083_),
    .O(_022_)
  );
  nand_gate _163_ (
    .A(_082_),
    .B(_083_),
    .O(_023_)
  );
  nand_gate _164_ (
    .A(data_inout),
    .B(_022_),
    .O(_024_)
  );
  and_gate _165_ (
    .A(_021_),
    .B(_024_),
    .O(_025_)
  );
  and_gate _166_ (
    .A(cmd_count_pre[2]),
    .B(cmd_count_pre[0]),
    .O(_026_)
  );
  and_gate _167_ (
    .A(cmd_count_pre[1]),
    .B(_026_),
    .O(_027_)
  );
  and_gate _168_ (
    .A(cmd_reg[1]),
    .B(_085_),
    .O(_028_)
  );
  nand_gate _169_ (
    .A(_027_),
    .B(_028_),
    .O(_029_)
  );
  nor_gate _170_ (
    .A(cmd_count_pre[2]),
    .B(cmd_count_pre[0]),
    .O(_030_)
  );
  and_gate _171_ (
    .A(cmd_count_pre[1]),
    .B(_030_),
    .O(_031_)
  );
  or_gate _172_ (
    .A(_016_),
    .B(_031_),
    .O(_032_)
  );
  or_gate _173_ (
    .A(_062_),
    .B(_092_),
    .O(_033_)
  );
  and_gate _174_ (
    .A(_032_),
    .B(_033_),
    .O(_034_)
  );
  and_gate _175_ (
    .A(_029_),
    .B(_034_),
    .O(_035_)
  );
  nand_gate _176_ (
    .A(_025_),
    .B(_035_),
    .O(_095_[0])
  );
  nand_gate _177_ (
    .A(curr_state[2]),
    .B(_090_),
    .O(_036_)
  );
  nand_gate _178_ (
    .A(_088_),
    .B(_036_),
    .O(_037_)
  );
  nand_gate _179_ (
    .A(curr_state[3]),
    .B(_090_),
    .O(_038_)
  );
  and_gate _180_ (
    .A(_087_),
    .B(_038_),
    .O(_039_)
  );
  and_gate _181_ (
    .A(_037_),
    .B(_039_),
    .O(_040_)
  );
  nand_gate _182_ (
    .A(_015_),
    .B(_031_),
    .O(_041_)
  );
  or_gate _183_ (
    .A(data_inout),
    .B(_023_),
    .O(_042_)
  );
  nand_gate _184_ (
    .A(_058_),
    .B(_027_),
    .O(_043_)
  );
  nand_gate _185_ (
    .A(_085_),
    .B(_043_),
    .O(_044_)
  );
  and_gate _186_ (
    .A(_041_),
    .B(_044_),
    .O(_045_)
  );
  and_gate _187_ (
    .A(_042_),
    .B(_045_),
    .O(_046_)
  );
  nand_gate _188_ (
    .A(_040_),
    .B(_046_),
    .O(_095_[1])
  );
  nand_gate _189_ (
    .A(cmd_reg[0]),
    .B(_027_),
    .O(_047_)
  );
  nand_gate _190_ (
    .A(_085_),
    .B(_047_),
    .O(_048_)
  );
  nand_gate _191_ (
    .A(_082_),
    .B(_089_),
    .O(_049_)
  );
  and_gate _192_ (
    .A(_016_),
    .B(_049_),
    .O(_050_)
  );
  and_gate _193_ (
    .A(_048_),
    .B(_050_),
    .O(_051_)
  );
  nand_gate _194_ (
    .A(_025_),
    .B(_051_),
    .O(_095_[2])
  );
  or_gate _195_ (
    .A(count_reached_in),
    .B(_092_),
    .O(_052_)
  );
  nand_gate _196_ (
    .A(_058_),
    .B(_085_),
    .O(_053_)
  );
  or_gate _197_ (
    .A(_047_),
    .B(_053_),
    .O(_054_)
  );
  nand_gate _198_ (
    .A(_052_),
    .B(_054_),
    .O(_095_[3])
  );
  (* src = "serial_ctrl.sv:95.5-102.8" *)
  dffnq _199_ (
    .CLK(clk),
    .D(_005_),
    .Q(cmd_count_pre[0])
  );
  (* src = "serial_ctrl.sv:95.5-102.8" *)
  dffnq _200_ (
    .CLK(clk),
    .D(_006_),
    .Q(cmd_count_pre[1])
  );
  (* src = "serial_ctrl.sv:95.5-102.8" *)
  dffnq _201_ (
    .CLK(clk),
    .D(_007_),
    .Q(cmd_count_pre[2])
  );
  (* src = "serial_ctrl.sv:236.5-238.8" *)
  dffpq _202_ (
    .CLK(clk),
    .D(curr_state[0]),
    .Q(curr_state_post[0])
  );
  (* src = "serial_ctrl.sv:236.5-238.8" *)
  dffpq _203_ (
    .CLK(clk),
    .D(curr_state[1]),
    .Q(curr_state_post[1])
  );
  (* src = "serial_ctrl.sv:236.5-238.8" *)
  dffpq _204_ (
    .CLK(clk),
    .D(curr_state[2]),
    .Q(curr_state_post[2])
  );
  (* src = "serial_ctrl.sv:236.5-238.8" *)
  dffpq _205_ (
    .CLK(clk),
    .D(curr_state[3]),
    .Q(curr_state_post[3])
  );
  (* src = "serial_ctrl.sv:233.5-235.8" *)
  dffnq _206_ (
    .CLK(clk),
    .D(curr_state_pre[0]),
    .Q(curr_state[0])
  );
  (* src = "serial_ctrl.sv:233.5-235.8" *)
  dffnq _207_ (
    .CLK(clk),
    .D(curr_state_pre[1]),
    .Q(curr_state[1])
  );
  (* src = "serial_ctrl.sv:233.5-235.8" *)
  dffnq _208_ (
    .CLK(clk),
    .D(curr_state_pre[2]),
    .Q(curr_state[2])
  );
  (* src = "serial_ctrl.sv:233.5-235.8" *)
  dffnq _209_ (
    .CLK(clk),
    .D(curr_state_pre[3]),
    .Q(curr_state[3])
  );
  (* src = "serial_ctrl.sv:152.5-232.8" *)
  dffprq _210_ (
    .CLK(clk),
    .D(_095_[0]),
    .Q(curr_state_pre[0]),
    .RESET(syncreset2)
  );
  (* src = "serial_ctrl.sv:152.5-232.8" *)
  dffprq _211_ (
    .CLK(clk),
    .D(_095_[1]),
    .Q(curr_state_pre[1]),
    .RESET(syncreset2)
  );
  (* src = "serial_ctrl.sv:152.5-232.8" *)
  dffprq _212_ (
    .CLK(clk),
    .D(_095_[2]),
    .Q(curr_state_pre[2]),
    .RESET(syncreset2)
  );
  (* src = "serial_ctrl.sv:152.5-232.8" *)
  dffprq _213_ (
    .CLK(clk),
    .D(_095_[3]),
    .Q(curr_state_pre[3]),
    .RESET(syncreset2)
  );
  (* src = "serial_ctrl.sv:144.5-151.8" *)
  dffnrq _214_ (
    .CLK(clk),
    .D(syncreset1),
    .Q(syncreset2),
    .RESET(reset_in)
  );
  (* src = "serial_ctrl.sv:136.5-143.8" *)
  dffprq _215_ (
    .CLK(clk),
    .D(1'h1),
    .Q(syncreset1),
    .RESET(reset_in)
  );
  (* src = "serial_ctrl.sv:130.5-132.8" *)
  dffpq _216_ (
    .CLK(clk),
    .D(ack_out_pre[0]),
    .Q(ack_out[0])
  );
  (* src = "serial_ctrl.sv:130.5-132.8" *)
  dffpq _217_ (
    .CLK(clk),
    .D(ack_out_pre[1]),
    .Q(ack_out[1])
  );
  (* src = "serial_ctrl.sv:130.5-132.8" *)
  dffpq _218_ (
    .CLK(clk),
    .D(ack_out_pre[2]),
    .Q(ack_out[2])
  );
  (* src = "serial_ctrl.sv:108.5-118.8" *)
  dffnq _219_ (
    .CLK(clk),
    .D(_001_),
    .Q(enable_ack)
  );
  (* src = "serial_ctrl.sv:103.5-105.8" *)
  dffpq _220_ (
    .CLK(clk),
    .D(cmd_count_pre[0]),
    .Q(cmd_count[0])
  );
  (* src = "serial_ctrl.sv:103.5-105.8" *)
  dffpq _221_ (
    .CLK(clk),
    .D(cmd_count_pre[1]),
    .Q(cmd_count[1])
  );
  (* src = "serial_ctrl.sv:103.5-105.8" *)
  dffpq _222_ (
    .CLK(clk),
    .D(cmd_count_pre[2]),
    .Q(cmd_count[2])
  );
  (* src = "serial_ctrl.sv:122.5-129.8" *)
  dffnq _223_ (
    .CLK(clk),
    .D(_008_),
    .Q(ack_out_pre[0])
  );
  (* src = "serial_ctrl.sv:122.5-129.8" *)
  dffnq _224_ (
    .CLK(clk),
    .D(_009_),
    .Q(ack_out_pre[1])
  );
  (* src = "serial_ctrl.sv:122.5-129.8" *)
  dffnq _225_ (
    .CLK(clk),
    .D(_010_),
    .Q(ack_out_pre[2])
  );
  (* src = "serial_ctrl.sv:83.5-90.8" *)
  dffpq _226_ (
    .CLK(clk),
    .D(_000_[0]),
    .Q(cmd_reg_pre[0])
  );
  (* src = "serial_ctrl.sv:83.5-90.8" *)
  dffpq _227_ (
    .CLK(clk),
    .D(_000_[1]),
    .Q(cmd_reg_pre[1])
  );
  (* src = "serial_ctrl.sv:80.5-82.8" *)
  dffnq _228_ (
    .CLK(clk),
    .D(cmd_reg_pre[0]),
    .Q(cmd_reg[0])
  );
  (* src = "serial_ctrl.sv:80.5-82.8" *)
  dffnq _229_ (
    .CLK(clk),
    .D(cmd_reg_pre[1]),
    .Q(cmd_reg[1])
  );
  (* src = "serial_ctrl.sv:68.5-75.8" *)
  dffpq _230_ (
    .CLK(clk),
    .D(_004_),
    .Q(update_shift_reg_out)
  );
  (* src = "serial_ctrl.sv:55.5-62.8" *)
  dffnq _231_ (
    .CLK(clk),
    .D(_002_),
    .Q(enable_write)
  );
  (* src = "serial_ctrl.sv:42.5-49.8" *)
  dffnq _232_ (
    .CLK(clk),
    .D(_003_),
    .Q(reset_shift_reg_out)
  );
endmodule
